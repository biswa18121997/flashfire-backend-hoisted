
import VerifyInterestedClient from "./Middlewares/VerifyInterestedClient.js";
import Register_Sessions from "./Controllers/Register_Sessions.js";
import Contact from "./Controllers/Contact.js";
import EmployerForm from "./Controllers/EmployerForm.js";
import TwilioReminder from "./Controllers/TwilioReminder.js";
import twilio from 'twilio';
import SendEmailReminder from "./Controllers/SendEmailReminder.js";
// Campaign Controllers
import {
  createCampaign,
  getAllCampaigns,
  getCampaignById,
  trackPageVisit,
  updateCampaign,
  deleteCampaign,
  getCampaignStatistics
} from "./Controllers/CampaignController.js";
import {
  getAllBookings,
  getBookingById,
  updateBookingStatus,
  getBookingsByEmail,
  exportBookingsForMicroservice,
  markBookingsAsSynced,
  captureFrontendBooking
} from "./Controllers/CampaignBookingController.js";
// import {GetMeetDetails} from "./Utils/GetMeetDetails.js";
// import Calendly_Meet_Integration from "./Controllers/Calendly_Meet_Integration.js";



  //these routes are defined and codes are written only requires minor modification to suit on a case by case basis..


export default function Routes(app){
  //login routes and registration routes :
  //the login and registraion routes works but we should or can use supabase auth system
  // the login and registraion routes doesnot have email verification integrated in it..
  //since login and registration routes are not required as of now...

   

   //admin routes to add a job...
   //CheckJobExistance is the middleware that checks if the job being added is already present to avoid duplicate records..
   //CheckJobExistance uses job ID as parameter , job id is generated by ()=>date.now()...it keeps the id unique..
  //  job adding by admin routes....here a auth is required for enabling only authenticated admin to add job and authenticated user 
  //LocalTokenValidator can be used 

  
   //this is the place where all the paid users will appear to the BDE and also the relevant jobs will also appear
   //my idea is that on clicking each of the paid user we open the student dashboard where all the details like education,
   // skills, jobs applied, interview status etc can be done..
   //apart from these only an admin can create a new admin or a paid user and the admin can post a job to db using the '''/admin/addjobs route'''


   
   //this is the route when a new user clicks on the try now button..it verifies the details and adds details to the database..
   app.post('/', VerifyInterestedClient , Register_Sessions);
   //this is the route that calandly posts on for sending meeting details..from here meeting details or sessions can be added to DB for sales people..
  //  app.post("/calendly-webhook",GetMeetDetails);
   //the routes that handles contact us page..
   app.post('/api/contact', Contact);
   app.post('/employerform', EmployerForm);
   // app.post('/calendly-webhook',Calendly_Meet_Integration);
  //  app.post("/twilio-ivr", TwilioReminder);

  // ==================== CAMPAIGN ROUTES ====================
  // Campaign Management
  app.post('/api/campaigns', createCampaign); // Create new campaign
  app.get('/api/campaigns', getAllCampaigns); // Get all campaigns
  app.get('/api/campaigns/stats', getCampaignStatistics); // Get overall statistics
  app.get('/api/campaigns/:campaignId', getCampaignById); // Get specific campaign with details
  app.put('/api/campaigns/:campaignId', updateCampaign); // Update campaign
  app.delete('/api/campaigns/:campaignId', deleteCampaign); // Delete campaign
  
  // Tracking
  app.post('/api/campaigns/track/visit', trackPageVisit); // Track page visit with UTM
  
  // Booking Management
  app.get('/api/campaign-bookings', getAllBookings); // Get all bookings
  app.get('/api/campaign-bookings/debug/all', async (req, res) => {
    // DEBUG ENDPOINT - Shows ALL bookings with full details
    try {
      const { CampaignBookingModel } = await import('./Schema_Models/CampaignBooking.js');
      const bookings = await CampaignBookingModel.find().sort({ bookingCreatedAt: -1 }).limit(20);
      return res.status(200).json({
        success: true,
        count: bookings.length,
        bookings: bookings.map(b => ({
          bookingId: b.bookingId,
          campaignId: b.campaignId,
          utmSource: b.utmSource,
          clientName: b.clientName,
          clientEmail: b.clientEmail,
          clientPhone: b.clientPhone,
          calendlyMeetLink: b.calendlyMeetLink,
          scheduledEventStartTime: b.scheduledEventStartTime,
          bookingCreatedAt: b.bookingCreatedAt,
          bookingStatus: b.bookingStatus
        }))
      });
    } catch (error) {
      return res.status(500).json({ success: false, error: error.message });
    }
  });
  app.get('/api/campaign-bookings/:bookingId', getBookingById); // Get specific booking
  app.get('/api/campaign-bookings/email/:email', getBookingsByEmail); // Get bookings by email
  app.put('/api/campaign-bookings/:bookingId/status', updateBookingStatus); // Update booking status
  app.post('/api/campaign-bookings/frontend-capture', captureFrontendBooking); // Capture from frontend (backup)
  
  // Microservice Integration
  app.get('/api/campaign-bookings/export', exportBookingsForMicroservice); // Export bookings
  app.post('/api/campaign-bookings/mark-synced', markBookingsAsSynced); // Mark as synced

  // // Handle Gather result
  // app.post("/twilio/response", (req, res) => {
  //   const VoiceResponse = twilio.twiml.VoiceResponse;
  //   const twiml = new VoiceResponse();

  //   const digit = (req.body?.Digits || "").trim();
  //   if (digit === "1") {
  //     twiml.say("Great. See you in the meeting. Goodbye!");
  //   } else {
  //     twiml.say("Input received. Goodbye!");
  //   }
  //   res.status(200).type("text/xml").send(twiml.toString());
  // });
  
  // app.post('/sendReminderEmail', SendEmailReminder);
}

// LoginVerifier, LocalTokenValidator
// LoginVerifier, LocalTokenValidator
